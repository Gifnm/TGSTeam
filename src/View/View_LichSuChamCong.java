/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import DAO.CaLamViecCTDAO;
import DAO.CaLamViecDAO;
import Model.CaLamViec;
import Model.CaLamViecCT;
import Model.NhanVien;
import com.edysys.utils.Auth;
import java.awt.Button;
import java.awt.CardLayout;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Label;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ASUS
 */
public class View_LichSuChamCong extends javax.swing.JFrame {
     DefaultTableModel modelLsChamCham = new DefaultTableModel();
     List<CaLamViecCT> listLichSuChamC= new ArrayList<>();
    /**
     * Creates new form View_LichSuChamCong
     */
    public View_LichSuChamCong() {
        initComponents();
        Image img1 = Toolkit.getDefaultToolkit().createImage("C:\\Users\\ASUS\\OneDrive\\Documents\\NetBeansProjects\\TGSTeam\\src\\icon\\bird.png");
        this.setIconImage(img1);
         AddChamCong();
       modelLsChamCham = (DefaultTableModel) jtbLSChamCong.getModel();
       FillToTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtbLSChamCong = new javax.swing.JTable();
        jpnChamCong = new javax.swing.JPanel();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jtbLSChamCong.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ngày", "Cửa Hàng", "Ca", "Thời gian", "Thời gian chấm công", "Trạng thái", "Xác nhận"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtbLSChamCong);

        jpnChamCong.setBackground(new java.awt.Color(153, 204, 255));
        jpnChamCong.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Chấm công", javax.swing.border.TitledBorder.LEADING, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 12), new java.awt.Color(102, 102, 102))); // NOI18N

        javax.swing.GroupLayout jpnChamCongLayout = new javax.swing.GroupLayout(jpnChamCong);
        jpnChamCong.setLayout(jpnChamCongLayout);
        jpnChamCongLayout.setHorizontalGroup(
            jpnChamCongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 316, Short.MAX_VALUE)
        );
        jpnChamCongLayout.setVerticalGroup(
            jpnChamCongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 182, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 901, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpnChamCong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jpnChamCong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        
       // AddChamCong();
    }//GEN-LAST:event_formComponentShown

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
       // AddChamCong();
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(View_LichSuChamCong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(View_LichSuChamCong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(View_LichSuChamCong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(View_LichSuChamCong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new View_LichSuChamCong().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel jpnChamCong;
    private javax.swing.JTable jtbLSChamCong;
    // End of variables declaration//GEN-END:variables
CaLamViecCTDAO daoCaLamCT = new CaLamViecCTDAO();
CaLamViecDAO caLamViecDAO = new CaLamViecDAO();
// Hiển thị dữ liệu lên bảng chấm công    
    public void FillToTable(){
        System.out.println("View.View_LichSuChamCong.FillToTable()");
    listLichSuChamC = daoCaLamCT.getLichSuChamCong(LayNgay(), Auth.user.getMaNV());
        System.out.println("View.View_LichSuChamCong.FillToTable()"+listLichSuChamC.size());
    CaLamViec caLamViec= new CaLamViec();
    modelLsChamCham.setRowCount(0);
        for (CaLamViecCT caLamViecCT : listLichSuChamC) {
            System.out.println("2");
            caLamViec = caLamViecDAO.selectById(caLamViecCT.getMaCaLV());
            modelLsChamCham.addRow(new Object[]{caLamViecCT.getNgay(),"FOly",caLamViecCT.getMaCaLV(),caLamViec.getThoiGianBatDau()+"-"+caLamViec.getThoiGianKetThuc(),caLamViecCT.getThoiGianChamCong()==null?"Chưa chấm":caLamViecCT.getThoiGianChamCong(),caLamViecCT.getXacNhanQuanLy()==false?"Chưa xác nhận":"Đã xác nhận",caLamViecCT.getXacNhanQuanLy()==false?"0/"+caLamViec.getSoGioCong():caLamViecCT.getGioCongXacNhan()+"/"+caLamViec.getSoGioCong()});
        }
}
    // Hiển thị cửa sổ chấm công
public void AddChamCong(){
    System.out.println("View.View_LichSuChamCong.AddChamCong()");
    NhanVien nv = new NhanVien();
        nv = Auth.user;
        List = dao.selectByDateAndMaNV(LayNgay(), nv.getMaNV());
        this.jpnChamCong.setLayout(new GridLayout(List.size(), 2, 10, 10));
       
        for (CaLamViecCT caLamViecCT : List) {
            this.jpnChamCong.add(new Label(caLamViecCT.getMaCaLV()));
            if (caLamViecCT.getMaCaLV().equalsIgnoreCase("CA1")) {
                this.jpnChamCong.add(chamCong1);
                if(caLamViecCT.getThoiGianChamCong()!=null){
               // this.JpnChamCong.add(new Button("Đã chấm"));
               FillToTable();
               chamCong1.setLabel("Đã chấm");
               chamCong1.setEnabled(false);
                }
                else{
                    
                chamCong1.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                  
                        chamCong1.setEnabled(false);
                        caLamViecCT.setThoiGianChamCong(LayTime());
                        dao.updateTime(caLamViecCT);
                    }
                });}
            } else if (caLamViecCT.getMaCaLV().equalsIgnoreCase("CA2")) {
                 this.jpnChamCong.add(chamCong2);
                   if(caLamViecCT.getThoiGianChamCong()!=null){
//                this.JpnChamCong.add(new Button("Đã chấm"));
 FillToTable();
chamCong2.setLabel("Đã chấm");
               chamCong2.setEnabled(false);
                }
                else{
               
                chamCong2.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                      
                        caLamViecCT.setThoiGianChamCong(LayTime());
                        dao.updateTime(caLamViecCT);
                         FillToTable();
                          chamCong2.setLabel("Đã chấm");
                        chamCong2.setEnabled(false);
                    }
                });}
            } else if (caLamViecCT.getMaCaLV().equalsIgnoreCase("CA3")) {
                 this.jpnChamCong.add(chamCong3);
                   if(caLamViecCT.getThoiGianChamCong()!=null){
               // this.JpnChamCong.add(new Button("Đã chấm"));
                FillToTable();
               chamCong3.setLabel("Đã chấm");
               chamCong3.setEnabled(false);
                }
                else{
                       
               
                chamCong3.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        
                        caLamViecCT.setThoiGianChamCong(LayTime());
                        dao.updateTime(caLamViecCT);
                         FillToTable();
                          chamCong3.setLabel("Đã chấm");
                        chamCong3.setEnabled(false);
                    }
                });}
            } else if (caLamViecCT.getMaCaLV().equalsIgnoreCase("CA4")) {
                  this.jpnChamCong.add(chamCong4);
                   if(caLamViecCT.getThoiGianChamCong()!=null){
               // this.JpnChamCong.add(new Button("Đã chấm"));
                FillToTable();
               chamCong4.setLabel("Đã chấm");
               chamCong4.setEnabled(false);
                }
                else{
              
                chamCong4.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        chamCong4.setName("Đã chấm");
                        caLamViecCT.setThoiGianChamCong(LayTime());
                        dao.updateTime(caLamViecCT);
                         FillToTable();
                          chamCong4.setLabel("Đã chấm");
                        chamCong4.setEnabled(false);
                    }
                });}
            } else if (caLamViecCT.getMaCaLV().equalsIgnoreCase("CA5")) {
                 this.jpnChamCong.add(chamCong5);
                   if(caLamViecCT.getThoiGianChamCong()!=null){
               // this.JpnChamCong.add(new Button("Đã chấm"));
               chamCong5.setLabel("Đã chấm");
               chamCong5.setEnabled(false);
                }
                else{
               
                chamCong5.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        chamCong5.setName("Đã chấm");
                        caLamViecCT.setThoiGianChamCong(LayTime());
                        dao.updateTime(caLamViecCT);
                          chamCong5.setLabel("Đã chấm");
                        chamCong5.setEnabled(false);
                    }
                });}
            }
        }
}
List<CaLamViecCT> List = new ArrayList<>();
    CaLamViecCTDAO dao = new CaLamViecCTDAO();
    Button chamCong1 = new Button("Chấm Ca 1");

    Button chamCong2 = new Button("Chấm Ca 2");
    Button chamCong3 = new Button("Chấm Ca 3");
    Button chamCong4 = new Button("Chấm Ca 4");
    Button chamCong5 = new Button("Chấm Ca 5");

    public String LayNgay() {
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Calendar cal = Calendar.getInstance();
        String timeNow = dateFormat.format(cal.getTime());
        return timeNow;
    }

    public String LayTime() {
        DateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");
        Calendar cal = Calendar.getInstance();
        String timeNow = dateFormat.format(cal.getTime());
        return timeNow;
    }
}
